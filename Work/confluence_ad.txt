Absolutely! Below is an expanded Confluence-style documentation for Article Detective, incorporating additional context, technical insights, user experience design details, and governance considerations‚Äîideal for internal documentation used by product, engineering, and compliance teams on Confluence.

‚∏ª

üïµÔ∏è Article Detective ‚Äì Application Documentation

‚∏ª

üìñ Purpose

Article Detective was born out of a direct request from our Compliance Officers, who each year review hundreds of investigative and journalistic articles for potential risk exposure. Manually scanning such volumes is time-consuming, error-prone, and difficult to scale.

Article Detective streamlines this workflow by automatically:
	‚Ä¢	Extracting and standardizing names of people and organizations
	‚Ä¢	Flagging those with possible criminal associations against our historical entity database
	‚Ä¢	Visualizing connections and patterns across documents

By providing analysts and compliance teams with instant, data-driven insights, Article Detective significantly reduces review time, boosts accuracy in identifying high-risk entities, and ensures no critical link goes unnoticed.
‚∏ª

üéØ Use Cases
	‚Ä¢	Investigative journalism support: Discover links between entities across multiple articles.
	‚Ä¢	Compliance & due diligence: Pre-screen names against a historical entity and crime pattern database.
	‚Ä¢	Internal investigations: Map internal or external actors linked to misconduct.
	‚Ä¢	Document-driven intelligence gathering: Quickly surface and synthesize information from longform content.

‚∏ª

üß± Architecture Overview

graph TD
    UI[Frontend Interface]
    API[REST API Layer]
    Processor[Document Processing Pipeline]
    LLM[LLM-Powered NLP Engine]
    DB[PostgreSQL + Redis]
    Storage[S3 Storage]
    Graph[Graph Visualization Engine]
    UI --> API
    API --> Processor
    Processor --> LLM
    Processor --> DB
    Processor --> Storage
    Processor --> Graph
    Graph --> UI
    DB --> UI

	RiskLab Platform
	‚Ä¢	A proprietary bank-internal wrapper around Azure
	‚Ä¢	Manages clusters (workspaces) that allocate compute and storage resources
	‚Ä¢	Persists uploaded files and intermediate data in Azure Blob Storage
	‚Ä¢	(Resource consumption details are documented on the RiskLab Resource Usage page)
	‚Ä¢	Article Detective App
	‚Ä¢	Streamlit front end for user interaction and dashboarding
	‚Ä¢	Python processing scripts triggered from the UI for NLP pipelines
	‚Ä¢	Embedded HTML tables in Streamlit for the Activities Dashboard
	‚Ä¢	Data-Base Engine/ Object relational mapping layer for all database reads/writes to a central SQL database

This separation ensures that Article Detective can focus on analysis and visualization, while RiskLab provides a scalable, secure Azure-backed infrastructure.
‚∏ª

üß© Feature Set (Detailed)

üì• Document Upload & Pipeline Execution
	‚Ä¢	Multi-upload drag-and-drop interface
	‚Ä¢	File validation (format, size, encoding)
	‚Ä¢	Upload queue monitoring
	‚Ä¢	Reprocessing check to avoid duplication

üîê All uploads are encrypted at rest and in transit.

‚∏ª

üìÑ Article Summarization (Layered)

üì∞ Article Summarization

Each time you upload documents, Article Detective generates concise, actionable summaries:
	‚Ä¢	Single Document Upload
When you upload one article, the system returns a one-paragraph summary of that document.
	‚Ä¢	Multiple Document Uploads
When you upload multiple articles, the system will:
	1.	Produce a one-paragraph summary for each article (so each document gets its own standalone paragraph).
	2.	Automatically generate a composite summary at the end, which synthesizes the individual summaries and highlights:
	‚Ä¢	Shared entities across articles
	‚Ä¢	Recurring themes or patterns
	‚Ä¢	Important connections and red flags that emerge only when viewing the articles as a group

‚ö° Example Workflow
	1.	Upload report1.docx, investigation2.docx, and profile3.docx.
	2.	Receive three separate paragraphs‚Äîone per file‚Äîdetailing each article‚Äôs key points.
	3.	Read the final ‚ÄúGroup Overview‚Äù paragraph, which draws links between those articles (e.g., ‚ÄúAll three pieces reference Company X‚Äôs offshore transactions and highlight individual Y‚Äôs repeated involvement‚Ä¶‚Äù).

‚∏ª

üßæ Entity Flagging Dashboard

A feature-rich interface to review system-detected entities.

The Entity Flagging Dashboard is a central, interactive HTML table that displays all entities identified and flagged by the LLM and our custom algorithms. It empowers analysts to review, correct, and enrich entity data in real time, creating a continuous feedback loop that improves model accuracy.

Feature
Description
Real-time Editing
Inline edits save immediately to the database‚Äîno page reload required.
Add/Remove Entities
‚Ä¢ Add new entities not detected by the system‚Ä¢ Remove false positives or obsolete entries
Modify Crime Flags
‚Ä¢ Add or remove one or more crime tags per entity (e.g., toggle between CRIME A and CRIME B)‚Ä¢ Support for multiple flags per row
Update Any Column
‚Ä¢ Edit entity descriptions, comments, and confidence scores‚Ä¢ Change categorization (first-degree vs. second-degree)
Filtering & Sorting
‚Ä¢ Filter by crime type, flag status, or confidence level‚Ä¢ Sort alphabetically, by frequency, or by date first flagged
Bulk Actions
‚Ä¢ Select multiple rows to apply the same update (e.g., flag all selected entities for a new crime)

üë§ User Interaction Flow
	1.	Review Flags
Entities automatically flagged by the LLM appear in the table with their detected crimes and summary.
	2.	Correct & Enrich
	‚Ä¢	Click on a cell to edit text (description, comments).
	‚Ä¢	Use the crime-tag dropdown to add/remove flags.
	‚Ä¢	Click the ‚Äú+‚Äù icon to insert a completely new entity row.
	‚Ä¢	Use the trash icon to delete an incorrect entity.
	3.	Save & Sync
All changes persist instantly to the central SQL database via our DbE ORM layer.
	4.	Feedback Loop
Each user modification (new entity, changed flag, edited description) is logged and fed back into the training pipeline to refine both the LLM prompts and the rule-based components.

Tip:
Use the filter bar at the top of the table to narrow down entities by specific crimes or confidence levels before applying bulk updates.
‚∏ª

üåê Entity Graph View

The Entity Relationships Graph provides a visual network focused on flagged entities and their direct and indirect connections‚Äîhelping analysts uncover hidden links and patterns across articles.

eature
Description
Flagged-Centric View
Automatically highlights entities flagged by the LLM in red, then dynamically loads their first- and second-degree neighbors in orange and yellow, respectively.
Relationship Types
Edge labels display one of our predefined categories (e.g., owner, investor, partner, shareholder, representative, beneficiary, other).
Dynamic Expansion
Click on any node to expand its neighbors on the fly, revealing connections not explicitly mentioned in the article corpus.
Interactive Controls
‚Ä¢ Zoom & Pan: Mouse or touch gestures for seamless navigation‚Ä¢ Full-Screen Mode: Focus on complex networks without UI distractions
Detail-On-Demand
Selecting a node opens a side-panel with:


	‚Ä¢	Entity summary and description
	‚Ä¢	List of associated crimes and flags
	‚Ä¢	Links to all source articles where the entity appears                                                               |
| Filtering & Highlighting    | ‚Ä¢ Filter by relationship type or confidence score‚Ä¢ Highlight Paths between two selected entities to trace potential indirect links  


üë§ User Interaction Flow
	1.	Initial Load
	‚Ä¢	Graph centers on all flagged entities from the current analysis.
	2.	Explore Connections
	‚Ä¢	Click a flagged node to expand its network neighbors.
	‚Ä¢	Use filters to show only specific relationship types (e.g., ‚Äúinvestor‚Äù links).
	3.	Investigate Details
	‚Ä¢	Hover over edges to see brief relationship summaries.
	‚Ä¢	Select nodes to view full entity dossiers in the side-panel.
	4.	Visual Insights
	‚Ä¢	Identify clusters of high-risk actors or unexpected intermediary entities.
	‚Ä¢	Export the graph view as PNG or GraphML for reporting or further analysis.

‚ö° Developer & Model-Training Benefits
	‚Ä¢	Hidden Link Detection: Surface non-obvious connections that can guide deeper investigative queries.
	‚Ä¢	Feedback Loop: Analysts can flag spurious or missing links right from the graph, feeding corrections back into the relationship-extraction algorithms.
	‚Ä¢	Auditability: All expansions and interactions are logged, ensuring reproducible analyses and compliance traceability.


üîú Upcoming Enhancements
	‚Ä¢	Historical Timeline Slider: Animate network growth over time to see how relationships evolve.
	‚Ä¢	Custom Relationship Schemas: Allow business users to define new link types (e.g., ‚Äúadvisor,‚Äù ‚Äúaffiliate‚Äù).
	‚Ä¢	Confidence-Based Edge Styling: Thicker lines or opacity levels to denote relationship confidence scores.
‚∏ª

üßæ Entity Summary Browser

Entity-centric browsing panel.

For Each Entity:
	‚Ä¢	Full name and aliases
	‚Ä¢	Mention count across articles
	‚Ä¢	Related entities and shared articles
	‚Ä¢	Associated crimes and confidence indicators

üìà Helps analysts track repeat appearances across documents and builds entity dossiers.

‚∏ª

‚úçÔ∏è Manual Entity Input

The Manual Entity Input feature empowers users to directly contribute to and refine the Entity Flagging Dashboard by adding, editing, or removing entities on the fly. All inputs not only update the live table but also generate valuable feedback for model and ruleset improvements.


Capability
Description
Add New Entity
Enter a new entity‚Äôs Name, select one or more Crime Flags, and provide a Description.
Edit Existing Entity
Update any field (Name, Crime Flags, Description, Comments) inline within the table.
Remove Entity
Delete false positives or obsolete entries with a single click.
Instant Sync
All changes immediately propagate to the central SQL database and refresh the Entity Flagging Dashboard.
Feedback Capture
Each manual action (add/edit/delete) is logged and sent to the development team as labelled training data to enhance future LLM accuracy.


üë§ User Interaction Flow
	1.	Open Manual Input Panel
Click the ‚Äú+ Add Entity‚Äù button above the dashboard to open the input form.
	2.	Provide Entity Details
	‚Ä¢	Name: Full entity name (e.g., ‚ÄúAcme Offshore Ltd.‚Äù).
	‚Ä¢	Crime Flags: Select from dropdown (e.g., ‚ÄúFraud,‚Äù ‚ÄúMoney Laundering‚Äù). Multiple selections allowed.
	‚Ä¢	Description: Brief context or rationale for flagging.
	‚Ä¢	Comments (optional): Analyst notes or sources.
	3.	Submit & View
	‚Ä¢	On submission, the new row appears instantly in the Entity Flagging Dashboard.
	‚Ä¢	The table remains fully editable for any further tweaks.
	4.	Delete or Edit
	‚Ä¢	Use the inline edit controls or trash icon to modify or remove the entry.

‚∏ª

‚ö° Developer & Model-Training Benefits
	‚Ä¢	Human-Labelled Data: Analyst inputs serve as high-quality labels for supervised retraining of LLM prompts and rule-based components.
	‚Ä¢	Error Correction: Rapid correction of false positives/negatives directly informs threshold adjustments and entity-resolution logic.
	‚Ä¢	Audit Trail: All manual edits include timestamps and user IDs, ensuring clear traceability for compliance reviews.

‚∏ª

üîú Upcoming Enhancements
	‚Ä¢	Input Templates: Pre-defined templates for common entity types (e.g., ‚ÄúShell Company,‚Äù ‚ÄúPolitically Exposed Person‚Äù) to standardize entries.
	‚Ä¢	Bulk Upload: CSV import for adding or updating multiple entities in one action.
	‚Ä¢	In-Context Suggestions: Auto-complete suggestions for entity names and crime flags based on the existing database.

‚∏ª

‚∏ª
Article Detective‚Äôs backend is orchestrated by a Streamlit application that sequentially triggers a suite of Python scripts. Each script performs a distinct analytical step, feeding its output into the next, to transform raw documents into a rich graph of flagged entities.






‚∏ª

1. Document Analysis & Entity Expansion
	‚Ä¢	Purpose: Parse the uploaded .docx (and soon .pdf) to extract raw text segments.
	‚Ä¢	Process:
	‚Ä¢	Use NLP tokenization to split text into logical ‚Äúchunks.‚Äù
	‚Ä¢	Generate candidate entity strings via custom heuristics.
	‚Ä¢	Glider module performs entity expansion‚Äîgrowing each seed string into variant forms (e.g., abbreviations, acronyms).

‚∏ª

2. Entity Resolution
	‚Ä¢	Purpose: Consolidate multiple mentions of the same real-world entity.
	‚Ä¢	Process:
	‚Ä¢	Compute Jaccard similarity on token sets and cosine similarity on embedding vectors.
	‚Ä¢	Group strings into clusters when similarity exceeds configurable thresholds.
	‚Ä¢	Assign a canonical name to each cluster for downstream processing.

‚∏ª

3. Entity Exclusion
	‚Ä¢	Purpose: Remove non-informative or overly generic terms that could muddy analysis.
	‚Ä¢	Process:
	‚Ä¢	Filter out terms matching a curated stop-list (e.g., ‚Äúmanager,‚Äù ‚Äúdirector,‚Äù ‚Äúteam lead‚Äù).
	‚Ä¢	Drop entities with high document-frequency across all uploads (heuristic for generic roles).

‚∏ª

4. Entity Categorization
	‚Ä¢	Purpose: Classify each resolved entity by the type of criminal activity it may be associated with.
	‚Ä¢	Process:
	‚Ä¢	Send entity descriptions to the LLM, along with a predefined list of crime categories supplied by the business.
	‚Ä¢	The model returns one or more flags (e.g., ‚ÄúMoney Laundering,‚Äù ‚ÄúEmbezzlement‚Äù).
	‚Ä¢	Store both the category and a confidence score for later filtering.

‚∏ª

5. Relationship Building
	‚Ä¢	Purpose: Discover direct links between flagged entities based on co-occurrence and contextual cues.
	‚Ä¢	Process:
	‚Ä¢	Analyze proximity within text (same paragraph/sentence).
	‚Ä¢	Apply rule-based pattern matching (e.g., ‚ÄúX is a subsidiary of Y‚Äù).
	‚Ä¢	Generate a set of (Entity A) ‚Äî [Relationship Type] ‚Äî> (Entity B) triples.

‚∏ª

6. Second-Degree Flagging
	‚Ä¢	Purpose: Identify entities indirectly connected to criminal actors (‚Äúfriends of flagged‚Äù).
	‚Ä¢	Process:
	‚Ä¢	For each flagged entity, query the LLM for known associates or partners that may also warrant attention.
	‚Ä¢	Validate suggestions against the historical entity database to avoid spurious flags.
	‚Ä¢	Mark these as second-degree in the graph view.

‚∏ª

üîÑ Continuous Feedback Loop:
All user edits in the Flagging Dashboard feed back into retraining both the LLM prompts and rule-based thresholds, refining every step of this pipeline over time.